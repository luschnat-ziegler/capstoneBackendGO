// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luschnat-ziegler/cc_backend_go/domain (interfaces: UserRepository)

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/luschnat-ziegler/cc_backend_go/domain"
	dto "github.com/luschnat-ziegler/cc_backend_go/dto"
	errs "github.com/luschnat-ziegler/cc_backend_go/errs"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ByEmail mocks base method
func (m *MockUserRepository) ByEmail(arg0 string) (*domain.User, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByEmail", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// ByEmail indicates an expected call of ByEmail
func (mr *MockUserRepositoryMockRecorder) ByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByEmail", reflect.TypeOf((*MockUserRepository)(nil).ByEmail), arg0)
}

// ById mocks base method
func (m *MockUserRepository) ById(arg0 string) (*domain.User, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ById indicates an expected call of ById
func (mr *MockUserRepositoryMockRecorder) ById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockUserRepository)(nil).ById), arg0)
}

// Save mocks base method
func (m *MockUserRepository) Save(arg0 domain.User) (*string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockUserRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), arg0)
}

// UpdateWeights mocks base method
func (m *MockUserRepository) UpdateWeights(arg0 dto.SetUserWeightsRequest) (*dto.SetUserWeightsResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWeights", arg0)
	ret0, _ := ret[0].(*dto.SetUserWeightsResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateWeights indicates an expected call of UpdateWeights
func (mr *MockUserRepositoryMockRecorder) UpdateWeights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWeights", reflect.TypeOf((*MockUserRepository)(nil).UpdateWeights), arg0)
}
