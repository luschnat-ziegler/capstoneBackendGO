// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luschnat-ziegler/cc_backend_go/domain (interfaces: CountryRepository)

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/luschnat-ziegler/cc_backend_go/domain"
	errs "github.com/luschnat-ziegler/cc_backend_go/errs"
	reflect "reflect"
)

// MockCountryRepository is a mock of CountryRepository interface
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockCountryRepository) FindAll() ([]domain.Country, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Country)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockCountryRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCountryRepository)(nil).FindAll))
}
